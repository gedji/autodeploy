# Lambda Function for {{ spec.framework|default('application') }}
resource "aws_lambda_function" "main" {
  filename         = "{{ spec.framework|default('app') }}.zip"
  function_name    = "{{ spec.framework|default('app') }}-function"
  role            = aws_iam_role.lambda.arn
  handler         = "{% if spec.framework == 'nodejs' %}index.handler{% elif spec.framework == 'python' %}lambda_function.lambda_handler{% else %}index.handler{% endif %}"
  runtime         = "{{ spec.runtime|default('nodejs18.x') }}"
  timeout         = {{ spec.timeout_seconds|default(30) }}
  memory_size     = {{ spec.memory_mb|default(512) }}
  
  {% if spec.environment_variables %}
  environment {
    variables = {
      {% for key, value in spec.environment_variables.items() %}
      {{ key }} = "{{ value }}"
      {% endfor %}
    }
  }
  {% endif %}
  
  tags = {
    Name        = "{{ spec.framework|default('app') }}-lambda"
    Environment = "{{ spec.environment|default('dev') }}"
    Framework   = "{{ spec.framework|default('app') }}"
    ManagedBy   = "AutoDeploy"
  }
}

# IAM Role for Lambda
resource "aws_iam_role" "lambda" {
  name = "{{ spec.framework|default('app') }}-lambda-role"
  
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })
  
  tags = {
    Name = "{{ spec.framework|default('app') }}-lambda-role"
  }
}

# IAM Role Policy Attachment for Lambda Basic Execution
resource "aws_iam_role_policy_attachment" "lambda_basic" {
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  role       = aws_iam_role.lambda.name
}

{% if spec.monitoring.cloudwatch_logs %}
# CloudWatch Log Group for Lambda
resource "aws_cloudwatch_log_group" "lambda" {
  name              = "/aws/lambda/{{ spec.framework|default('app') }}-function"
  retention_in_days = {{ spec.monitoring.log_retention_days|default(7) }}
  
  tags = {
    Name = "{{ spec.framework|default('app') }}-lambda-logs"
  }
}
{% endif %}

{% if spec.function_type == 'api' %}
# API Gateway for HTTP API
resource "aws_apigatewayv2_api" "main" {
  name          = "{{ spec.framework|default('app') }}-api"
  protocol_type = "HTTP"
  description   = "API for {{ spec.framework|default('app') }} application"
  
  cors_configuration {
    allow_credentials = false
    allow_headers     = ["content-type", "x-amz-date", "authorization", "x-api-key", "x-amz-security-token"]
    allow_methods     = ["*"]
    allow_origins     = ["*"]
    expose_headers    = ["date", "keep-alive"]
    max_age           = 86400
  }
  
  tags = {
    Name = "{{ spec.framework|default('app') }}-api"
  }
}

# API Gateway Integration
resource "aws_apigatewayv2_integration" "main" {
  api_id               = aws_apigatewayv2_api.main.id
  integration_type     = "AWS_PROXY"
  connection_type      = "INTERNET"
  description          = "Lambda integration"
  integration_method   = "POST"
  integration_uri      = aws_lambda_function.main.invoke_arn
  passthrough_behavior = "WHEN_NO_MATCH"
}

# API Gateway Route
resource "aws_apigatewayv2_route" "main" {
  api_id    = aws_apigatewayv2_api.main.id
  route_key = "ANY /{proxy+}"
  target    = "integrations/${aws_apigatewayv2_integration.main.id}"
}

# API Gateway Deployment
resource "aws_apigatewayv2_deployment" "main" {
  api_id      = aws_apigatewayv2_api.main.id
  description = "{{ spec.framework|default('app') }} API deployment"
  
  depends_on = [
    aws_apigatewayv2_route.main
  ]
  
  lifecycle {
    create_before_destroy = true
  }
}

# API Gateway Stage
resource "aws_apigatewayv2_stage" "main" {
  api_id        = aws_apigatewayv2_api.main.id
  deployment_id = aws_apigatewayv2_deployment.main.id
  name          = "{{ spec.environment|default('dev') }}"
  auto_deploy   = true
  
  {% if spec.monitoring.cloudwatch_logs %}
  access_log_settings {
    destination_arn = aws_cloudwatch_log_group.api.arn
    format = jsonencode({
      requestId      = "$context.requestId"
      ip            = "$context.identity.sourceIp"
      requestTime   = "$context.requestTime"
      httpMethod    = "$context.httpMethod"
      routeKey      = "$context.routeKey"
      status        = "$context.status"
      protocol      = "$context.protocol"
      responseLength = "$context.responseLength"
    })
  }
  {% endif %}
  
  tags = {
    Name = "{{ spec.framework|default('app') }}-api-stage"
  }
}

# Lambda Permission for API Gateway
resource "aws_lambda_permission" "api_gateway" {
  statement_id  = "AllowExecutionFromAPIGateway"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.main.function_name
  principal     = "apigateway.amazonaws.com"
  source_arn    = "${aws_apigatewayv2_api.main.execution_arn}/*/*"
}

{% if spec.monitoring.cloudwatch_logs %}
# CloudWatch Log Group for API Gateway
resource "aws_cloudwatch_log_group" "api" {
  name              = "/aws/apigateway/{{ spec.framework|default('app') }}-api"
  retention_in_days = {{ spec.monitoring.log_retention_days|default(7) }}
  
  tags = {
    Name = "{{ spec.framework|default('app') }}-api-logs"
  }
}
{% endif %}
{% endif %}